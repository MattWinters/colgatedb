package colgatedb.page;

/**
 * ColgateDB
 * @author Michael Hay mhay@colgate.edu
 * <p>
 * ColgateDB was developed by Michael Hay but borrows considerably from past
 * efforts including SimpleDB (developed by Sam Madden at MIT) and its predecessor
 * Minibase (developed at U. of Wisconsin by Raghu Ramakrishnan).
 * <p>
 * The contents of this file are either wholly the creation of Michael Hay or are
 * a significant adaptation of code from the SimpleDB project.  A number of
 * substantive changes have been made to meet the pedagogical goals of the cosc460
 * course at Colgate.  If this file contains remnants from SimpleDB, we are
 * grateful for Sam's permission to use and adapt his materials.
 */

/**
 * Page is the interface used to represent pages that are resident in memory.
 * <p>
 * For recovery purposes, pages MUST have a constructor that is capable of
 * constructing a page object given data specified in a byte[] array.
 */
public interface Page {

    /**
     * Return the id of this page.  The id is a unique identifier for a page
     * that can be used to look up the page on disk or determine if the page
     * is resident in the buffer pool.
     *
     * @return the id of this page
     */
    PageId getId();

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte array
     * generated by getPageData to the Page constructor and have it produce
     * an identical Page object.
     *
     * @return A byte array correspond to the bytes of this page.
     */
    byte[] getPageData();

    /**
     * Provide a representation of this page before any modifications were made
     * to it.  Used by recovery.
     */
    Page getBeforeImage();

    /*
     * Update before image: set it equal to current page content.  Used when
     * a transaction that modified this page commits.
     */
    void setBeforeImage();

}
